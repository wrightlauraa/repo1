// HUSH PART 1
// By Katie Meyer (km13oj@student.ocadu.ca) and Laura Wright (wrightlauraann@gmail.com)
// OCAD University, Toronto, 2013

/* This sketch measures volume, gathers data about the volume levels, and
 tweets out the volume level information every five minutes to the @VolumeBot2013 account.
 */

import ddf.minim.*; // Import minim library
import java.io.BufferedWriter; 
import java.io.FileWriter;
Minim minim;
AudioInput in;

String outFilename = "out.txt"; // saves the volume data to a file called 'out.txt'

import twitter4j.conf.*; // import Twitter library
import twitter4j.*;
import twitter4j.auth.*;
import twitter4j.api.*;
import java.util.*;
Twitter twitter;

ArrayList points = new ArrayList();
boolean drawing = false;
int volume, zeroes, elapsedFrames, puntDist = 0;

// the variables for the audio lines in our sketch
float r=random(0);
float startPointX, startPointY, velUp = 0;
int startMove = 20;
int mult = 100;

int numReadings = 15000;
// 1000 = 3 readings per minute apparently
// 3000 = 1 reading perm inute
//15000 = every 5 minutes
// 30000 = every 10 minutes
int[] readings = new int[numReadings];
//int readings[numReadings];      // the readings from the analog input
int index = 0;                  // the index of the current reading
int total = 0;                  // the running total
int average = 0;  

int oldAverage = 0;

float[] storedVals = new float[300];

int h = hour();  
int mi = minute();  
int d = day(); 
int mo = month();
int yr = year();


void setup()
{
  size(512, 200);
  // instantiate a Minim object
  minim = new Minim(this);
  // get a line out from Minim, 
  // default sample rate is 44100, bit depth is 16
  in = minim.getLineIn(Minim.STEREO, 512);

  ConfigurationBuilder cb = new ConfigurationBuilder();
  //Twitter authentication information
  cb.setOAuthConsumerKey("lcF1EdYQyIaCNvKakN55ZQ");
  cb.setOAuthConsumerSecret("crHnE0ltFimGwMAH1fGQkU4Jj8mDl9mln7PzeTCe2Aw");
  cb.setOAuthAccessToken("2196637356-DGfetY4uYSIkDFFTkeyKGL3w0Ua9hUkNqCOcp81");
  cb.setOAuthAccessTokenSecret("ahz9l7JhigSCZNLHrQoqhXDkWJpm30PzNd9t4OiQB5fxE");
  TwitterFactory tf = new TwitterFactory(cb.build());
  twitter = tf.getInstance();

  for (int thisReading = 0; thisReading < numReadings; thisReading++) { // for loop for average equation
    readings[thisReading] = 0;
  }
} 


void draw()
{
  background(255);
  smooth();

  int d = day();    // Values from 1 - 31
  int m = month();  // Values from 1 - 12
  int y = year(); 

  volume = abs(int(in.right.get(1)*mult)); // get volume reading
  float volumeConverted = map(float(volume), 0, 100, 0, 1000); // map volume for greater detail

  for (int i = 0; i < in.bufferSize() - 1; i++) // draw lines for testing 
  {
    line(i, 50 + in.left.get(i)*50, i+1, 50 + in.left.get(i+1)*50);
    line(i, 150 + in.right.get(i)*50, i+1, 150 + in.right.get(i+1)*50);
  }

  // at the edge of the screen, go back to the beginning:

//AVERAGE EQUATION
  total = total - readings[index];   // read from the sensor:  
  readings[index] = int(volumeConverted);  
  total = total + readings[index];    
  // advance to the next position in the array:  
  index = index + 1;                    
  // if we're at the end of the array...
  if (index >= numReadings) {           
    // ...wrap around to the beginning:
    index = 0;                          
    // calculate the average:
    average = total / numReadings;        
    // send it to the computer as ASCII digits 

      ////information for saving to the data file
      // it saves the data for the hour, minute, day, etc. and separates it by commas
    float averageData = average;
    String output = averageData + "," + h + "," + mi + "," + d + "," + mo + "," + yr;
    appendTextToFile(outFilename, output);
    println(averageData);
  }

  talk(); 
  oldAverage = average; // create two average values so we can only tweet if there has been a change
}
////////////////////

/* Twitter functions:
These read the average volume levels, 
and if the old average (meaning from the past 5 minutes)
is different from the current average, then tweet out the message based 
on how loud it is.*/

void talk() {
  if ((oldAverage != average) && (average>=0) && (average<=5)) {
    text("Silent.", 50, 30);
    try
    {
      Status status = twitter.updateStatus("It's silent at DFI right now."  + " Volume level from 0 to 100: " + average + ". Time: " + hour() + ":" + minute());
      System.out.println("Status updated to [" + status.getText() + "].");
    }
    catch (TwitterException te)
    {
      System.out.println("Error: "+ te.getMessage());
    }
  }

  if ((oldAverage != average) && (average>=6) && (average<=20)) {
    try
    {
      Status status = twitter.updateStatus("It's pretty quiet in the studio."  + " Volume level from 0 to 100: " + average + ". Time: " + hour() + ":" + minute());
      System.out.println("Status updated to [" + status.getText() + "].");
    }
    catch (TwitterException te)
    {
      System.out.println("Error: "+ te.getMessage());
    }
  }

  if ((oldAverage != average) && (average >=21) && (average <=40)) { //Draw if vol>1
    text("It's medium.", 50, 30);
    try
    {
      Status status = twitter.updateStatus("There are a few people at the studio right now."  + " Volume level from 0 to 100: " + average + ". Time: " + hour() + ":" + minute());
      System.out.println("Status updated to [" + status.getText() + "].");
    }
    catch (TwitterException te)
    {
      System.out.println("Error: "+ te.getMessage());
    }
  }

  if ((oldAverage != average) && (average >=41) && (average <=80)) { //Draw if vol>1
    try
    {
      Status status = twitter.updateStatus("Super loud here today. Avoid if you need a quiet space!"  + " Volume level from 0 to 100: " + average + ". Time: " + hour() + ":" + minute());
      System.out.println("Status updated to [" + status.getText() + "].");
    }
    catch (TwitterException te)
    {
      System.out.println("Error: "+ te.getMessage());
    }
  }

  if ((oldAverage != average) && (average >=81)) { //Draw if vol>1
    text("It's crazy loud.", 50, 30);
    try
    {
      Status status = twitter.updateStatus("There's a rave going on at the DFI studio right now. It's crazy loud. "  + " Volume level from 0 to 100: " + average + ". Time: " + hour() + ":" + minute());
      System.out.println("Status updated to [" + status.getText() + "].");
    }
    catch (TwitterException te)
    {
      System.out.println("Error: "+ te.getMessage());
    }
  }
}


// This creates a data file for the sketch.
void appendTextToFile(String filename, String text) {
  File f = new File(dataPath(filename));
  if (!f.exists()) {
    createFile(f);
  }
  try {
    PrintWriter out = new PrintWriter(new BufferedWriter(new FileWriter(f, true)));
    out.println(text);
    out.close();
  }
  catch (IOException e) {
    e.printStackTrace();
  }
}

//Creates a new file including all subfolders
void createFile(File f) {
  File parentDir = f.getParentFile();
  try {
    parentDir.mkdirs(); 
    f.createNewFile();
  }
  catch(Exception e) {
    e.printStackTrace();
  }
} 

void stop()
{
  // always close audio I/O classes
  in.close(); // ends recording when sketch is stopped
  // always stop your Minim object
  minim.stop();
}
